{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototypes","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","original","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"4NAGcA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,uBAAMC,SAVU,SAACC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,UACI,8CACA,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,cAwBhCZ,EAAYe,WAAa,CACrBd,cAAee,IAAUC,KAAKC,Y,mCC/BrBC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,SAASZ,QAVf,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAsB,EAArBJ,GAAsB,IAAlBT,EAAiB,EAAjBA,IAAKU,EAAY,EAAZA,MAElC,OACI,sBAAKI,UAAU,wCAAf,UACI,qBAAKC,IAAMf,EAAKgB,IAAMN,IACtB,kCAAMA,SCFLO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECJwB,SAACA,GAEzB,MAA0BlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAVAC,qBAAU,WACNxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAAEpB,IAEEqB,EDfyBK,CAAc1B,GAAlCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACI,qCACI,oBAAIJ,UAAU,mCAAd,SAAmDhB,IAEjDoB,GAAW,2CAEb,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADEA,EAAIC,aEqBxBgB,EAnCM,WAEjB,MAAoC7C,mBAAS,CAAC,cAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAQA,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAGA,6BAEQ+C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAYA,GADLA,YCrB/B6B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.85b6f62c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const  AddCategory = ( {setCategories} ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSumit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2){\n            setCategories( cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit = { handleSumit }>\n            <h2>Add Category</h2>\n            <input\n                type='text'\n                value={ inputValue }\n                onChange={ handleInputChange }\n            ></input>\n        </form>\n    )\n}\n\nAddCategory.prototypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\nexport const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=12&api_key=9jjWFOI56l7wchUZpYlbeLsr35J56wGL`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.original.url\n        }\n    })\n\n    return gifs;\n\n}","import React from 'react'\n\nexport const GifGridItem = ({id, url, title }) => {\n\n    return (\n        <div className=\"card animate__animated animate__pulse\">\n            <img src= {url} alt={ title }></img>\n            <p> { title }</p>        \n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ( {category} ) => {\n\n    const {data:images, loading} =  useFetchGifs( category );\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__pulse\">{ category }</h3>\n\n            { loading && <p>Loading...</p>}\n\n            <div className=\"card-grid\">\n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key = {img.id}\n                            { ...img }\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    })\n\n\n    //useEffect ayuda a que se ejecute una vez cuando se renderiza el componente.\n    useEffect(() => {\n        getGifs( category )\n            .then( imgs => {\n                setstate({\n                    data: imgs,\n                    loading: false\n                });\n            });\n    }, [ category ])   \n\n    return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n// import PropTypes from 'prop-types';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Piece']);\n\n    // const handleAdd = (e) => {\n    //     // Dos formas de aregar elementos en un arreglo en un componente:\n    //     // setCategories([...categories, 'HunterxHunter']); \n    //     setCategories( cats => [...cats, 'HunterxHunter']); \n    // }\n\n    return (\n        <>\n            <h2> GifExpertApp </h2>\n            <AddCategory setCategories = { setCategories }/>\n            <hr></hr>\n\n\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid \n                        key = {category}\n                        category = {category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n}\n\nGifExpertApp.propTypes = {\n    // value: PropTypes.number\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}